// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/api/EventService.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventAPI_CreateEvent_FullMethodName      = "/event.EventAPI/CreateEvent"
	EventAPI_UpdateEvent_FullMethodName      = "/event.EventAPI/UpdateEvent"
	EventAPI_DeleteEvent_FullMethodName      = "/event.EventAPI/DeleteEvent"
	EventAPI_GetDailyEvents_FullMethodName   = "/event.EventAPI/GetDailyEvents"
	EventAPI_GetWeeklyEvents_FullMethodName  = "/event.EventAPI/GetWeeklyEvents"
	EventAPI_GetMonthlyEvents_FullMethodName = "/event.EventAPI/GetMonthlyEvents"
)

// EventAPIClient is the client API for EventAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventAPIClient interface {
	CreateEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error)
	GetDailyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error)
	GetWeeklyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error)
	GetMonthlyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error)
}

type eventAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAPIClient(cc grpc.ClientConnInterface) EventAPIClient {
	return &eventAPIClient{cc}
}

func (c *eventAPIClient) CreateEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) UpdateEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) DeleteEvent(ctx context.Context, in *AlterEventRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) GetDailyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_GetDailyEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) GetWeeklyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_GetWeeklyEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) GetMonthlyEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, EventAPI_GetMonthlyEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventAPIServer is the server API for EventAPI service.
// All implementations must embed UnimplementedEventAPIServer
// for forward compatibility.
type EventAPIServer interface {
	CreateEvent(context.Context, *AlterEventRequest) (*Response, error)
	UpdateEvent(context.Context, *AlterEventRequest) (*Response, error)
	DeleteEvent(context.Context, *AlterEventRequest) (*Response, error)
	GetDailyEvents(context.Context, *GetEventsRequest) (*Response, error)
	GetWeeklyEvents(context.Context, *GetEventsRequest) (*Response, error)
	GetMonthlyEvents(context.Context, *GetEventsRequest) (*Response, error)
	mustEmbedUnimplementedEventAPIServer()
}

// UnimplementedEventAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventAPIServer struct{}

func (UnimplementedEventAPIServer) CreateEvent(context.Context, *AlterEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventAPIServer) UpdateEvent(context.Context, *AlterEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventAPIServer) DeleteEvent(context.Context, *AlterEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventAPIServer) GetDailyEvents(context.Context, *GetEventsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyEvents not implemented")
}
func (UnimplementedEventAPIServer) GetWeeklyEvents(context.Context, *GetEventsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyEvents not implemented")
}
func (UnimplementedEventAPIServer) GetMonthlyEvents(context.Context, *GetEventsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyEvents not implemented")
}
func (UnimplementedEventAPIServer) mustEmbedUnimplementedEventAPIServer() {}
func (UnimplementedEventAPIServer) testEmbeddedByValue()                  {}

// UnsafeEventAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventAPIServer will
// result in compilation errors.
type UnsafeEventAPIServer interface {
	mustEmbedUnimplementedEventAPIServer()
}

func RegisterEventAPIServer(s grpc.ServiceRegistrar, srv EventAPIServer) {
	// If the following call pancis, it indicates UnimplementedEventAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventAPI_ServiceDesc, srv)
}

func _EventAPI_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).CreateEvent(ctx, req.(*AlterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).UpdateEvent(ctx, req.(*AlterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).DeleteEvent(ctx, req.(*AlterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_GetDailyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).GetDailyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_GetDailyEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).GetDailyEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_GetWeeklyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).GetWeeklyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_GetWeeklyEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).GetWeeklyEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_GetMonthlyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).GetMonthlyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventAPI_GetMonthlyEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).GetMonthlyEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventAPI_ServiceDesc is the grpc.ServiceDesc for EventAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventAPI",
	HandlerType: (*EventAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventAPI_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventAPI_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventAPI_DeleteEvent_Handler,
		},
		{
			MethodName: "GetDailyEvents",
			Handler:    _EventAPI_GetDailyEvents_Handler,
		},
		{
			MethodName: "GetWeeklyEvents",
			Handler:    _EventAPI_GetWeeklyEvents_Handler,
		},
		{
			MethodName: "GetMonthlyEvents",
			Handler:    _EventAPI_GetMonthlyEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/EventService.proto",
}
